name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Promote to environment"
        required: true
        type: choice
        options:
          - staging
          - prod
        default: staging
      image_tag:
        description: "Image tag to deploy (e.g. sha-abc123 or latest)"
        required: true
        default: latest

jobs:
  # ---------------- Build & Test (runs only on push) ----------------
  build-and-test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: 
          node-version: 18
      - run: npm ci
      - run: npm test

  # ---------------- Build & Push Docker (only on push) ----------------
  docker-build-push:
    if: github.event_name == 'push'
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - id: meta
        name: Compute image tag
        run: |
          SHORT=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "image_tag=sha-${SHORT}" >> $GITHUB_OUTPUT

      - name: Build & Push images
        run: |
          IMAGE="${{ secrets.DOCKER_USERNAME }}/my-sample-app"
          TAG="${{ steps.meta.outputs.image_tag }}"
          docker build -t "$IMAGE:$TAG" -t "$IMAGE:latest" .
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"

  # ---------------- Auto Deploy to Dev (only on push) ----------------
  deploy-dev:
    if: github.event_name == 'push'
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name "${{ secrets.EKS_CLUSTER_NAME }}" --region "${{ secrets.AWS_REGION }}"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Ensure namespace exists
        run: kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -

      - name: Ensure deployment exists (idempotent)
        run: kubectl -n dev apply -f k8s/deployment.yaml

      - name: Roll out new image to Dev
        run: |
          IMAGE="${{ secrets.DOCKER_USERNAME }}/my-sample-app:${{ needs.docker-build-push.outputs.image_tag }}"
          kubectl -n dev set image deployment/express-app express-app="$IMAGE"
          kubectl -n dev rollout status deployment/express-app --timeout=120s

  # ---------------- Manual Promotion to Staging/Prod ----------------
  promote:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name "${{ secrets.EKS_CLUSTER_NAME }}" --region "${{ secrets.AWS_REGION }}"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Ensure namespace exists
        run: kubectl create namespace "${{ github.event.inputs.environment }}" --dry-run=client -o yaml | kubectl apply -f -

      - name: Ensure deployment exists (idempotent)
        run: kubectl -n "${{ github.event.inputs.environment }}" apply -f k8s/deployment.yaml

      - name: Deploy selected image tag
        run: |
          IMAGE="${{ secrets.DOCKER_USERNAME }}/my-sample-app:${{ github.event.inputs.image_tag }}"
          NS="${{ github.event.inputs.environment }}"
          kubectl -n "$NS" set image deployment/express-app express-app="$IMAGE"
          kubectl -n "$NS" rollout status deployment/express-app --timeout=180s
